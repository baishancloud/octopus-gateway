#!/bin/bash
workspace=$(cd $(dirname $0) && pwd)
cd $workspace

module=gateway
app=falcon-$module
conf=cfg.json
pidfile=var/app.pid
logfile=var/app.log
gitversion=.gitversion
pfc=perfcounter.json
supconf=${app}.conf

mkdir -p var &>/dev/null


## build & pack
function build() {
    update_gitversion
    go build -o $app main.go
    sc=$?
    if [ $sc -ne 0 ];then
        echo "build error"
        exit $sc
    else
        echo -n "build ok, vsn=" 
        version
    fi
}

function pack() {
    build
    version=`./$app -v`
    tar zcvf $app-$version.tar.gz control $app ${supconf} cfg.example.json $pfc $gitversion ./test/debug
}

function packbin() {
    build
    version=`./$app -v`
    tar zcvf $app-bin-$version.tar.gz $app $gitversion
}

function configlocal(){
        if ! [ -f /etc/supervisor/conf.d/${supconf} ];then
                echo "Config file supervisord doesn't exist, creating one."
                cp ${supconf} /etc/supervisor/conf.d/
                service  supervisord restart
        fi
}

function run() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo -n "$app now is running already, pid="
        ps -C $app |grep -v "PID TTY" | awk '{print $1}'
        stop
	sleep 1
    fi

    if ! [ -f $conf ];then
        echo "Config file $conf doesn't exist, creating one."
        cp cfg.example.json $conf
    fi
    ulimit -HSn 65536
    ./$app -c $conf &> $logfile
}

## opt
function start() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo -n "$app started, pid="
        ps -C $app |grep -v "PID TTY" | awk '{print $1}'
        return 1
    fi
    ulimit -HSn 65536
    nohup ./$app -c $conf >>$logfile 2>&1 &
    echo $! > $pidfile
    echo "$app start ok, pid=$!"
}

function stop() {
    pid=`ps -C $app |grep -v "PID TTY" | awk '{print $1}'`
    kill $(pidof $app)
    echo "$app stoped..."
}

function restart() {
    stop && sleep 1 && start
}

function reload() {
    build && stop && sleep 1 && start && sleep 1 && printf "\n"  && tailf
}

## other
function status() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo -n "$app running, pid="
        cat $pidfile
    else
        echo "$app stoped"
    fi
}

function version() {
    v=`./$app -v`
    if [ -f $gitversion ];then
        g=`cat $gitversion`
    fi
    echo "$v $g"
}

function tailf() {
    tail -f $logfile
}

function check_pid() {
	running=`ps -C $app |grep -v "PID TTY"  |wc -l`
	return $running
}

function update_gitversion() {
    git log -1 --pretty=%h > $gitversion
}

## usage
function usage() {
    echo "$0 build|pack|packbin|run|configlocal|start|stop|restart|reload|status|tail|version"
}

## main
action=$1
case $action in
    ## build
    "build" )
        build
        ;;
    "pack" )
        pack
        ;;
    "packbin" )
        packbin
        ;;
    ## opt
    "run" )
	run
	;;
    "configlocal" )
	configlocal
	;;
    "start" )
        start
        ;;
    "stop" )
        stop
        ;;
    "restart" )
        restart
        ;;
    "reload" )
        reload
        ;;
    ## other
    "status" )
        status
        ;;
    "version" )
        version
        ;;
    "tail" )
        tailf
        ;;
    * )
        usage
        ;;
esac
